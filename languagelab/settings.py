"""
Django settings for languagelab project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

from datetime import timedelta
from json import loads
from logging import basicConfig, getLogger
from os import environ, path

from .django_environ import set_environ

LOG = getLogger()
basicConfig(level="DEBUG")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = path.dirname(path.dirname(path.abspath(__file__)))
APP_DIR = path.dirname((path.abspath(__file__)))

set_environ()

VERSION = "0.2.0"
API_VERSION = "0.2"

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ.get('DJANGO_SECRET_KEY')

# We are setting this because we are also setting DEFAULT_PERMISSION_CLASSES to
# ['rest_framework.permissions.IsAuthenticated']
CORS_ORIGIN_ALLOW_ALL = True


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_LIST = loads(environ.get('DJANGO_ALLOWED_HOSTS'))
ALLOWED_HOSTS = ['localhost', environ.get('DJANGO_HOST')] + ALLOWED_LIST

CSRF_TRUSTED_ORIGINS = ALLOWED_HOSTS

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'taggit',
    'taggit_serializer',
    'languagelab',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'languagelab.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'languagelab.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': environ.get(
            'DJANGO_DB_ENGINE', 'django.db.backends.postgresql_psycopg2'
            ),
        'NAME': environ.get('DJANGO_DB'),
        'USER': environ.get('DJANGO_DB_USER'),
        'PASSWORD': environ.get('DJANGO_DB_PASSWORD'),
        'HOST': environ.get('DJANGO_DB_HOST'),
        'PORT': environ.get('DJANGO_DB_PORT'),
        'OPTIONS': loads(environ.get('DJANGO_DB_OPTIONS'))
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = environ.get("DJANGO_TIMEZONE", 'UTC')

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_ROOT = environ.get(
    'DJANGO_STATIC_ROOT', path.join(BASE_DIR, 'static')
)

STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    path.join(APP_DIR, 'static'),
)

if environ.get('DJANGO_STATICFILES_DIR'):
    STATICFILES_DIRS = (list(STATICFILES_DIRS) + [environ.get(
        'DJANGO_STATICFILES_DIR'
        )
    ])

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    #    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR + '/log/django_debug.log'
        }

    },
    'loggers': {
        'languagelab': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        }
    }
}


JWT_EXPIRATION_SECONDS = environ.get('JWT_EXPIRATION_SECONDS', 3600)

def jwt_response_payload_handler(token, user=None, request=None):
    return {
        'token': token,
        'expiresIn': JWT_EXPIRATION_SECONDS
    }


JWT_AUTH = {
    'JWT_ALLOW_REFRESH': True,
    'JWT_EXPIRATION_DELTA': timedelta(seconds=JWT_EXPIRATION_SECONDS),
    'JWT_RESPONSE_PAYLOAD_HANDLER': jwt_response_payload_handler
}
